@page "/"

@inject ServiceManagerClient _client;
@inject NavigationManager navigationManager;

<PageTitle>Services</PageTitle>

<h1>Services</h1>

<Modal @ref="modal" /> 

<div class="row">
    <div class="col-12">
        <button class="btn " 
            @onclick="@(e => navigationManager.NavigateTo("/services/create"))"> 
            <Icon Name="IconName.PlusCircle" Color="IconColor.Dark" /> Add New Service
        </button>
        <button class="btn " 
            @onclick="@(e => navigationManager.NavigateTo("/services/create"))"> 
            <Icon Name="IconName.Recycle" Color="IconColor.Dark" /> Restart Service
        </button>

    </div>
</div>


<div class="row">

    <div class="col-12">

        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Host</th>
                    <th>Container Image</th>
                    <th>Container Port</th>
                    <th>Host Port</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>

                @if (services is null)
                {
                    <tr>
                        <td class="text-center"  colspan="6">
                            <img height="100px" src="/images/loading.gif" />
                            <p>Loading services...</p>
                        </td>
                    </tr>
                }
                else
                {
                    @foreach (var service in services)
                    {
                        if (service?.serviceName is not null)
                        {
                            <tr>
                                <td>
                                    <div class="form-check">
                                        <input class="form-check-input position-static" type="radio" name="blankRadio" id="blankRadio1" >
                                    </div>
                                </td>
                                <td>@service.serviceName</td>
                                <td>@service.hostName</td>
                                <td>@service.dockerImageUrl</td>
                                <td>@service.containerPortNumber</td>
                                <td>@service.hostPortNumber</td>
                                <td>
                                    <button class="btn btn-outline-danger" @onclick="@(e => ConfirmDelete(service.serviceName))"> <Icon Name="IconName.Trash" Color="IconColor.Danger" /></button>
                                </td>
                            </tr>
                        }
                    }

                }   
            </tbody>
        </table>

    </div>
</div>

@code {
    private IReadOnlyCollection<GetServiceResponse>? services;
    private Modal modal = default!;
    private string Services_Error = string.Empty;

    [Inject] protected ToastService ToastService { get; set; } = default!;

    protected override async Task OnInitializedAsync() => await LoadServices();

    private async Task LoadServices() {
        try
        {
            services = await _client.Get_All_ServicesAsync();
        }
        catch (Exception ex)
        {
            ToastService.Notify(new(ToastType.Danger, $"Services could not be loaded"));
            services = [];
            Services_Error = $"Services Could Not Be Loaded {ex.Message}";
        }
    }

    private async Task Delete(string serviceName)
    {
        try
        {
            await _client.Delete_ServiceAsync(serviceName);
            await LoadServices();
            ToastService.Notify(new(ToastType.Success, $"Service '{serviceName}' details deleted successfully."));
        }
        catch (Exception ex)
        {
            ToastService.Notify(new(ToastType.Danger, $"Error: {ex.Message}."));
        }
    }

    private async Task ConfirmDelete(string serviceName)
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("Name", serviceName);
        parameters.Add("OnConfirm", EventCallback.Factory.Create(this, async () => {
            await modal.HideAsync();
            await Delete(serviceName); 
        }));
        parameters.Add("OnReject", EventCallback.Factory.Create(this,  async () =>
        {
            await modal.HideAsync();
        }));

        await modal.ShowAsync<ConfirmDelete>(title : "Confirm Delete?", parameters: parameters);
    }

}
